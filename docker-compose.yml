version: '3.8'
services:

  # Starts the P/S emulator
  pubsub:
    image: gcr.io/google.com/cloudsdktool/cloud-sdk:316.0.0-emulators
    ports:
      - "8085:8085"
    entrypoint: gcloud beta emulators pubsub start --project test-project --host-port 0.0.0.0:8085
    healthcheck:
      test: ["CMD", "curl", "-f", "http://pubsub:8085"]
      interval: 5s
      timeout: 10s
      retries: 3

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations/init.sql:/docker-entrypoint-initdb.d/01-init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 10s
      retries: 3

  # Creates a topic
  mk-topic:
    image: alpine/httpie
    depends_on:
      pubsub:
        condition: service_healthy
    command: PUT http://pubsub:8085/v1/projects/test-project/topics/scan-topic

  # Creates a subscription
  mk-subscription:
    image: alpine/httpie
    depends_on:
      mk-topic:
        condition: service_completed_successfully
    command: PUT http://pubsub:8085/v1/projects/test-project/subscriptions/scan-sub topic=projects/test-project/topics/scan-topic --ignore-stdin 

  # Runs the "scanner"
  scanner:
    depends_on:
      mk-topic:
        condition: service_completed_successfully
    environment:
      PUBSUB_EMULATOR_HOST: ${PUBSUB_EMULATOR_HOST}
      PUBSUB_PROJECT_ID: ${PUBSUB_PROJECT_ID}
    build:
      context: .
      dockerfile: ./cmd/scanner/Dockerfile

  # Runs the processor
  processor:
    depends_on:
      postgres:
        condition: service_healthy
      mk-subscription:
        condition: service_completed_successfully
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PUBSUB_EMULATOR_HOST: ${PUBSUB_EMULATOR_HOST}
      PUBSUB_PROJECT_ID: ${PUBSUB_PROJECT_ID}
      PROCESSOR_SUBSCRIPTION: ${PROCESSOR_SUBSCRIPTION}
      PROCESSOR_LOG_LEVEL: ${PROCESSOR_LOG_LEVEL}
    build:
      context: .
      dockerfile: ./cmd/processor/Dockerfile

volumes:
  postgres_data:
